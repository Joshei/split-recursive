pushRowRight(rowIndex, colIndex, grid, leftOverChar){

  let CharacterOnAllLastRows = true
  for(let i = verticalCursorPosition/10-1 ; i < HEIGHT-2 ; i++){
      if (grid[i][WIDTH-1] == "-"){
        CharacterOnAllLastRows = false
      }
  }

  if(CharacterOnAllLastRows == true){
    //this.createRow(grid, rowIndex)
  }

  if(rowIndex >= HEIGHT -2){
    return grid
  }

  drawGrid(HEIGHT, WIDTH)
  //two rows were using for push
  let topRow = grid[(rowIndex)];
  let lowerRow = grid[rowIndex+1]
  let combineToBottomRow = []
  //if not a dash on last row end, than add that character on start of next line
  if (leftOverChar === "-"){
    combineToBottomRow = [...lowerRow]
  }else{
    combineToBottomRow = [...leftOverChar, ...lowerRow]
  }
  //one row, exactly, because of WIDTH, left over characters become remainder
  //for next call
  let [bottomRowReady, remainingChars] = this.splitAtIndex(combineToBottomRow, WIDTH)
  //let [left, remainingChars] = this.splitAtIndex(remainingChars, WIDTH)
  grid[rowIndex+1] = bottomRowReady

  if(grid[rowIndex][WIDTH-1] === "-"){
    //return grid//
  }
 
  

  /*
  if(rowIndex+2 <= HEIGHT-1 && grid[rowIndex+2][WIDTH-1] === "-"&& this.lastRowIndexToPushOn === -1  && rowIndex > horizontalCursorPosition/5){
    //sets row to bail out on in pushwords
    this.lastRowIndexToPushOn = rowIndex + 1
    //CursorMovements.cursorRight()
    //return grid
  }
  else{
    this.lastRowIndexToPushOn == HEIGHT-1
  }
*/
    //push next row to right(one position)  recursion
    this.pushRowRight(rowIndex+1, 0, grid, remainingChars)
    
  return grid
  }