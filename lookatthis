


initialInsert(IsFromIndex, rowIndex, colIndex, originalArr, leftOverChars)
  {
  //alert("initial")
  let DashFlagSet = false
  if(rowIndex > HEIGHT - 1)
  {
     return originalArr
  }
  let targetRow = originalArr[rowIndex];
  let [front, back] = this.splitAtIndex(targetRow, colIndex + 1);
  let lastIndex =  back.lastIndexOf("-");
  let [unused, leftWord] = this.splitAtIndex(back, lastIndex + 1);
 

  let combinedStringWithRemainder = [...front,  ...leftOverChars,...back];
  //splits string at the width, so will fit on one row, and rest is set to remainder.
  let [thisIsOneRowOrLess, leftOverRemainder] = this.splitAtIndex(combinedStringWithRemainder, WIDTH);
  if(originalArr[rowIndex][WIDTH-1] === "-")
   {
     DashFlagSet = true
   }
  originalArr[rowIndex] = thisIsOneRowOrLess; 
  //checks for a single character that is left over from total string
  if(leftOverRemainder[0] != "-" && leftOverRemainder[0] != "" && HEIGHT == verticalCursorPosition/10+1 && horizontalCursorPosition/5 != WIDTH-1)
   {
    
    this.createRow(originalArr, leftOverRemainder, rowIndex, colIndex)
    
    //get left word
    let lastIndex =  thisIsOneRowOrLess.indexOf("-");
    let [wordOnLeft, wordOnRight] = this.splitAtIndex(thisIsOneRowOrLess, lastIndex);
    let lengthOfLeftWord = wordOnLeft.length
    
    let amountOfTopSpaces = 0
    for (let i = (WIDTH - 1); i >= 0; i--) {
      if (
        originalArr[rowIndex][i] == "" ||
        originalArr[rowIndex][i] == " " ||
        originalArr[rowIndex][i] == "-"
      ) {
        amountOfTopSpaces++;
      }
      else{
        break;
      }
    }

    if(lengthOfLeftWord <= amountOfTopSpaces)
    {
      let targetOne = originalArr[rowIndex-1]
      let targetTwo = originalArr[rowIndex]

      let lastIndexRow2 =  targetTwo.indexOf("-");
      let lastIndexRow1 = targetOne.indexOf("-")
      let [rowTwoLeftWord, rowTwoWithoutLeftWord] = this.splitAtIndex(targetTwo, lastIndexRow2)
      let lengthOfRow2LeftWord = rowTwoLeftWord.length
      let [left, right] = this.splitAtIndex(targetOne, WIDTH - lastIndexRow2)

      let newRowOne = [...left, ...rowTwoLeftWord ]
      lengthOfRow2LeftWord = rowTwoLeftWord.length
      for(let i = 0 ; i < lengthOfRow2LeftWord ; i++)
      {
        rowTwoLeftWord[i] = "-"
      }
      originalArr[rowIndex-1] = newRowOne
      //originalArr[rowIndex] = [...rowTwoLeftWord, ...rowTwoWithoutLeftWord]
      //originalArr[rowIndex] = leftWord
      originalArr[rowIndex+1] = ["-", "-", "-", "-", "-", "-" , "-" ],
      originalArr[rowIndex+1] = leftOverRemainder
      let lengthOfRemainder = leftOverRemainder.length
      //drawGrid(HEIGHT, WIDTH)
      
      for(let i = 0 ; i < lengthOfLeftWord ; i++)
      {
        originalArr[rowIndex][i] = "-" 
      }
      for(let i = lengthOfRemainder ; i < WIDTH ; i++)
      {
        originalArr[rowIndex+1][i] = "-"
      }
     
    }
    //drawGrid(HEIGHT, WIDTH)
     
      //return originalArr
   }

   if (DashFlagSet == true)
   {
    //return originalArr
   }
   
   //horizontalCursorPosition = horizontalCursorPosition + 5
   //checks for an intial call from index
   if(IsFromIndex === true)
  {
  this.recursiveFunctionInsert(true, rowIndex+1 , colIndex, originalArr, leftOverRemainder)
  //drawGrid(HEIGHT, WIDTH)
  // drawCursor(
  //  horizontalCursorPosition + HOFFSET,
  //  verticalCursorPosition + VOFFSET
  // );
  return originalArr
  }
  else{
    this.recursiveFunctionInsert(false, rowIndex+1 , colIndex, originalArr, leftOverRemainder)
  }
  //drawGrid(HEIGHT, WIDTH)
  return originalArr
  }
  