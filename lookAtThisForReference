
////

function insertNewArr(originalArr, insertedArr, rowIndex, colIndex) {
  //counter++; //global counter can only ever contain the largest iteration number
  let innerCounter = counter; //locally declared counter is scoped to *this* iteration of the function
  let consolePad = "  ".repeat(innerCounter);
  console.log(consolePad, "-------------");
  console.log(consolePad, "ITERATION ", counter);
  console.log(consolePad, "***!!!start of insertNewArr function!!!***");
  console.log(consolePad, "--( originalArr");
  console.log(consolePad, snapshot(originalArr));
  console.log(consolePad, "insertedArr");
  console.log(consolePad, insertedArr);
  console.log(consolePad, "row:", rowIndex, "col", colIndex, ")--");
  let targetRow = originalArr[rowIndex];


////


  //adding a whole new row to the end of originalArr
  console.log(
    consolePad,
    "adding inserted array to end of new array by creating a new line"
  );
  //if we're adding onto the end of newArray, just push the inserted arr as a new row
  if (insertedArr.length <= maxCols) {
    //new row fits on one line

    console.log(consolePad, "new inserted row is within width constraints");
    // push the inserted arr as a new row
    originalArr.push(insertedArr);
    console.log(consolePad, "original array with new inserted line appended");
    console.log(consolePad, snapshot(originalArr));
  } else {
    //new row is too long

    console.log(consolePad, "inserted array is too long, break into lines");

    //split inserted line at max col width
    const [nextLine, remainder] = splitAtIndex(insertedArr, maxCols);
    console.log(consolePad, "line to add immediately:");
    console.log(consolePad, nextLine);
    console.log(
      consolePad,
      "line to process and then add to the next row after this one"
    );
    console.log(consolePad, remainder);
    //can't make the final recursive call until word adjustments have been made
    originalArr = adjustForWordBreaks(
      nextLine,
      remainder,
      originalArr,
      rowIndex,
      innerCounter
    );
  }

console.log(consolePad, "**!!END OF ITERATION ", innerCounter, "!!**");
console.log(consolePad, snapshot(originalArr));
console.log(consolePad, "-------------");
return originalArr;
}